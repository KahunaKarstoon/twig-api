Parameters:
  AppName:
    Type: String
    Description:  A short name for the application to build and deploy.

  GitHubRepo:
    Type: String
    Description:  The name of the repo to build.

  GitHubBranch:
    Type: String
    Default: master
    Description:  The name of the branch to build and deploy.

  GitHubUser:
    Type: String
    Default: buildit
    Description:  \"Owner\" of the repo.  Most likely will be \"buildit\" (as in buildit/twig in Github).

  GitHubToken:
    Type: String
    NoEcho: true
    Description:  Oauth token from Github.  CodeBuild to access the GitHubRepo.

  TargetGroupArn:
    Type: String
    Description:  The ARN of the TargetGroup to which the Service will be attached.

  ClusterArn:
    Type: String
    Description:  The ARN of the ECS Cluster to which code should be deployed.

  CfnTemplateBucket:
    Type: String
    Default:  twig-build-metal
    Description:  The bucket specific to this project which contains this and related templates (use ./bin/deploy script to package the templates in S3).

  BuildComputeType:
    Type: String
    Default:  BUILD_GENERAL1_SMALL
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Description:  The compute type used to run the build.  Use the smallest value that works for your build.

  BuildContainer:
    Type: String
    Default: aws/codebuild/docker:1.12.1
    Description:  The container where the build should execute.  See http://tinyurl.com/lhewywa for a list of available containers.

  ContainerPort:
    Type: Number
    Default: 80
    Description:  The in-container port number assigned to your service.

  HostPort:
    Type: Number
    Default: 80
    Description:  The ECS instance port number on which your service is exposed.  '0' for automatic assignment.


Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      AppName:
        default: "Name of Application"
      GitHubUser:
        default: "Github User"
      GitHubToken:
        default: "Github Personal Access Token"
      GitHubRepo:
        default: "Repo"
      GitHubBranch:
        default: "Branch to Build/Deploy"
      BuildComputeType:
        default: "CodeBuild Machine Size"
      BuildContainer:
        default: "CodeBuild Container"
      ClusterArn:
        default: "ARN of ECS Cluster for Deployments"
      TargetGroupArn:
        default: "Target Group for Deployments"
      CfnTemplateBucket:
        default: "Bucket from which this template is obtained"
    ParameterGroups:
      - Label:
          default: Application Confguration
        Parameters:
          - AppName
      - Label:
          default: GitHub Project Configuration
        Parameters:
          - GitHubRepo
          - GitHubBranch
          - GitHubUser
          - GitHubToken
      - Label:
          default: Build Configuration
        Parameters:
          - BuildComputeType
          - BuildContainer
      - Label:
          default: ECS Deployment Configuration
        Parameters:
          - ClusterArn
          - TargetGroupArn
          - ContainerPort
          - HostPort
      - Label:
          default: CloudFormation Stack Configuration
        Parameters:
          - CfnTemplateBucket


Resources:
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      RoleName: !Sub cfn-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cb-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub cp-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                  - !Sub arn:aws:s3:::${CfnTemplateBucket}
                  - !Sub arn:aws:s3:::${CfnTemplateBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Source:
        Location: !Sub ${ArtifactBucket}/source.zip
        Type: "S3"
      Environment:
        ComputeType: !Ref BuildComputeType
        Image: !Ref BuildContainer
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                Owner: !Ref GitHubUser
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
            - Name: Template
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: Template
              RunOrder: 1
              Configuration:
                S3Bucket: !Ref CfnTemplateBucket
                S3ObjectKey: templates.zip
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
#                ActionMode: CREATE_UPDATE
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub "${AWS::StackName}-Service"
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: Template::templates/service.yml
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "Tag" : { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
                    "DesiredCount": "1",
                    "ClusterArn": "${ClusterArn}",
                    "TargetGroupArn": "${TargetGroupArn}",
                    "Repository": "${Repository}",
                    "ContainerPort": "${ContainerPort}",
                    "HostPort": "${HostPort}",
                    "AppName": "${AppName}"
                  }
              InputArtifacts:
                - Name: Template
                - Name: BuildOutput
              RunOrder: 1


Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
